name: CI

on:
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e_playwright:
    name: Frontend E2E (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Setup pnpm
        if: ${{ hashFiles('frontend/pnpm-lock.yaml') != '' }}
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install frontend deps (pnpm)
        if: ${{ hashFiles('frontend/pnpm-lock.yaml') != '' }}
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Install frontend deps (npm)
        if: ${{ hashFiles('frontend/pnpm-lock.yaml') == '' }}
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: |
          if [ -f pnpm-lock.yaml ] ; then pnpm run build ; else npm run build ; fi

      - name: Start frontend server (bg)
        run: |
          nohup bash -c "cd frontend && ( [ -f pnpm-lock.yaml ] && pnpm start || npm run start )" >/dev/null 2>&1 &
          for i in {1..60}; do
            if curl -fsS http://localhost:3000/assessment >/dev/null; then
              echo "Frontend is up."
              break
            fi
            echo "Waiting for frontend to be ready..."
            sleep 2
          done

      - name: Install Playwright + browsers + a11y deps
        run: |
          ( [ -f test/package.json ] && ( npm -C test ci || npm -C test install ) ) || npm -C test install --no-save @axe-core/playwright
          npx playwright install --with-deps

      - name: Run Playwright tests (trace/screenshot/video, retries=1)
        env:
          CI: true
        run: npx playwright test -c test/playwright.config.ts

      - name: Upload Playwright HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: test/playwright-report
          if-no-files-found: ignore

      - name: Upload Playwright traces
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: test-results
          if-no-files-found: ignore

  backend_pytest:
    name: Backend Tests (pytest + coverage)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi starlette pydantic python-dotenv pytest pytest-cov

      - name: Run pytest with coverage gate (>=80%)
        run: pytest

      - name: Upload coverage.xml
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: ignore

  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install frontend deps
        working-directory: ./frontend
        run: |
          if [ -f pnpm-lock.yaml ]; then
            corepack enable pnpm
            pnpm install --frozen-lockfile
          else
            npm ci
          fi

      - name: Build frontend
        working-directory: ./frontend
        run: |
          if [ -f pnpm-lock.yaml ] ; then pnpm run build ; else npm run build ; fi

      - name: Start frontend server (bg)
        run: |
          nohup bash -c "cd frontend && ( [ -f pnpm-lock.yaml ] && pnpm start || npm run start )" >/dev/null 2>&1 &
          for i in {1..60}; do
            if curl -fsS http://localhost:3000/ >/dev/null; then
              echo "Frontend is up."
              break
            fi
            echo "Waiting for frontend to be ready..."
            sleep 2
          done

      - name: Run Lighthouse CI (using test/lighthouserc.json)
        run: |
          npm -C test install --no-save @lhci/cli@0.13.x
          npx --yes lhci autorun --config=./test/lighthouserc.json

      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: ./.lighthouseci
          if-no-files-found: ignore
