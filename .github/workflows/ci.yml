name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend_pytest:
    name: Backend Tests (pytest + coverage)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
            pip install httpx pytest pytest-cov
          else
            pip install fastapi "pydantic>=2" starlette httpx pytest pytest-cov
          fi
      - name: Run pytest with coverage gate (>=80%)
        run: pytest
      - name: Upload coverage.xml artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: ignore

  e2e_playwright:
    name: Frontend E2E (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Setup Yarn via Corepack
        if: ${{ hashFiles('frontend/yarn.lock') != '' }}
        run: |
          corepack enable
          corepack prepare yarn@1.22.19 --activate
      - name: Setup pnpm
        if: ${{ hashFiles('frontend/pnpm-lock.yaml') != '' }}
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          set -e
          if [ -f pnpm-lock.yaml ]; then
            pnpm install --frozen-lockfile || (pnpm install --lockfile-only && pnpm install --frozen-lockfile)
          elif [ -f yarn.lock ]; then
            yarn install --frozen-lockfile || yarn install
          else
            [ -f package-lock.json ] || npm install --package-lock-only
            npm ci || npm i
          fi
      - name: Build frontend
        working-directory: ./frontend
        run: |
          if [ -f pnpm-lock.yaml ]; then pnpm run build;
          elif [ -f yarn.lock ]; then yarn build;
          else npm run build; fi
      - name: Start frontend server and probe readiness
        env:
          READINESS_PATH: "/"
        run: |
          set -euo pipefail
          LOG=frontend_server.log

          echo "Starting frontend server..."
          if [ -f frontend/pnpm-lock.yaml ]; then
            nohup bash -c "cd frontend && pnpm start" >"$LOG" 2>&1 &
            SERVER_PID=$!
          elif [ -f frontend/yarn.lock ]; then
            nohup bash -c "cd frontend && yarn start" >"$LOG" 2>&1 &
            SERVER_PID=$!
          else
            nohup bash -c "cd frontend && npm run start" >"$LOG" 2>&1 &
            SERVER_PID=$!
          fi

          echo "Server started with PID: $SERVER_PID"

          # Give the server a moment to boot
          echo "Waiting for server to initialize..."
          sleep 10

          # Ensure the process is still alive
          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "Server process died. Log contents:"
            cat "$LOG"
            exit 1
          fi

          echo "Probing server endpoints..."
          for path in /assessment ${READINESS_PATH}; do
            echo "Probing $path ..."
            for i in {1..120}; do
              code="$(timeout 10 curl -s -o /dev/null -w "%{http_code}" "http://localhost:3000${path}" 2>/dev/null || echo 000)"
              if [ "$code" -ge 200 ] && [ "$code" -lt 400 ]; then
                echo "Frontend is up on $path (HTTP $code)."
                exit 0
              fi
              echo "Attempt $i: HTTP $code for $path"

              if ! kill -0 $SERVER_PID 2>/dev/null; then
                echo "Server process died during health check. Log contents:"
                cat "$LOG"
                exit 1
              fi

              sleep 2
            done
          done

          echo "Health check timeout. Server process status:"
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "Server is running (PID: $SERVER_PID)"
          else
            echo "Server process died"
          fi

          echo "Last 200 lines of server log:"
          tail -n 200 "$LOG" || true

          echo "Current server log (last 50 lines):"
          tail -n 50 "$LOG" || true

          exit 1
      - name: Install Playwright runner + a11y (in test/)
        run: |
          set -e
          mkdir -p test
          if [ -f test/package.json ]; then npm -C test ci || npm -C test install; else npm -C test init -y; fi
          npm -C test ls @playwright/test >/dev/null 2>&1 || npm -C test install --no-save @playwright/test@^1.46
          npm -C test ls @axe-core/playwright >/dev/null 2>&1 || npm -C test install --no-save @axe-core/playwright
          npx --prefix test playwright install --with-deps
      - name: Run Playwright tests (trace/screenshot/video, retries=1)
        env:
          CI: true
        run: npx --prefix test playwright test -c test/playwright.config.ts
      - name: Upload Playwright HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: test/playwright-report
          if-no-files-found: ignore
      - name: Upload Playwright traces
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-traces
          path: test-results
          if-no-files-found: ignore

  lighthouse:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Setup Yarn via Corepack
        if: ${{ hashFiles('frontend/yarn.lock') != '' }}
        run: |
          corepack enable
          corepack prepare yarn@1.22.19 --activate
      - name: Setup pnpm
        if: ${{ hashFiles('frontend/pnpm-lock.yaml') != '' }}
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          set -e
          if [ -f pnpm-lock.yaml ]; then
            pnpm install --frozen-lockfile || (pnpm install --lockfile-only && pnpm install --frozen-lockfile)
          elif [ -f yarn.lock ]; then
            yarn install --frozen-lockfile || yarn install
          else
            [ -f package-lock.json ] || npm install --package-lock-only
            npm ci || npm i
          fi
      - name: Build frontend
        working-directory: ./frontend
        run: |
          if [ -f pnpm-lock.yaml ]; then pnpm run build;
          elif [ -f yarn.lock ]; then yarn build;
          else npm run build; fi
      - name: Start frontend server and probe readiness
        env:
          READINESS_PATH: "/"
        run: |
          set -euo pipefail
          LOG=frontend_server.log

          echo "Starting frontend server..."
          if [ -f frontend/pnpm-lock.yaml ]; then
            nohup bash -c "cd frontend && pnpm start" >"$LOG" 2>&1 &
            SERVER_PID=$!
          elif [ -f frontend/yarn.lock ]; then
            nohup bash -c "cd frontend && yarn start" >"$LOG" 2>&1 &
            SERVER_PID=$!
          else
            nohup bash -c "cd frontend && npm run start" >"$LOG" 2>&1 &
            SERVER_PID=$!
          fi

          echo "Server started with PID: $SERVER_PID"

          echo "Waiting for server to initialize..."
          sleep 10

          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "Server process died. Log contents:"
            cat "$LOG"
            exit 1
          fi

          echo "Probing server endpoints..."
          for path in ${READINESS_PATH}; do
            echo "Probing $path ..."
            for i in {1..120}; do
              code="$(timeout 10 curl -s -o /dev/null -w "%{http_code}" "http://localhost:3000${path}" 2>/dev/null || echo 000)"
              if [ "$code" -ge 200 ] && [ "$code" -lt 400 ]; then
                echo "Frontend is up on $path (HTTP $code)."
                exit 0
              fi
              echo "Attempt $i: HTTP $code for $path"

              if ! kill -0 $SERVER_PID 2>/dev/null; then
                echo "Server process died during health check. Log contents:"
                cat "$LOG"
                exit 1
              fi

              sleep 2
            done
          done

          echo "Health check timeout. Server process status:"
          if kill -0 $SERVER_PID 2>/dev/null; then
            echo "Server is running (PID: $SERVER_PID)"
          else
            echo "Server process died"
          fi

          echo "Last 200 lines of server log:"
          tail -n 200 "$LOG" || true

          echo "Current server log (last 50 lines):"
          tail -n 50 "$LOG" || true

          exit 1
      - name: Run Lighthouse CI (using test/lighthouserc.json)
        run: |
          npm -C test install --no-save @lhci/cli@0.13.x
          npx --yes lhci autorun --config=./test/lighthouserc.json
      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: ./.lighthouseci
          if-no-files-found: ignore

  frontend_quality:
    name: Frontend Lint & Type Check (with ESLint fallback)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Setup Yarn via Corepack
        if: ${{ hashFiles('frontend/yarn.lock') != '' }}
        run: |
          corepack enable
          corepack prepare yarn@1.22.19 --activate
      - name: Setup pnpm
        if: ${{ hashFiles('frontend/pnpm-lock.yaml') != '' }}
        uses: pnpm/action-setup@v4
        with:
          version: 9
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          if [ -f pnpm-lock.yaml ]; then pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile;
          elif [ -f yarn.lock ]; then yarn install --frozen-lockfile || yarn install;
          else npm ci || npm i; fi
      - name: ESLint (project config or CI fallback - fully isolated)
        working-directory: ./frontend
        shell: bash
        run: |
          set -euo pipefail
          if [ -f .eslintrc ] || [ -f .eslintrc.js ] || [ -f .eslintrc.cjs ] || [ -f .eslintrc.json ] || [ -f .eslintrc.yml ] || [ -f .eslintrc.yaml ]; then
            echo "Running ESLint with project config..."
            npx -y eslint@8 . --ext .js,.jsx,.ts,.tsx --max-warnings=0
          else
            echo "No ESLint config found. Using fully isolated fallback (no install into project)..."
            ESLINT_HOME="$(mktemp -d)"
            echo '{}' > "$ESLINT_HOME/package.json"
            npm --prefix "$ESLINT_HOME" install eslint@8 @typescript-eslint/parser@6 @typescript-eslint/eslint-plugin@6 eslint-plugin-jsx-a11y@6
            PARSER_PATH="$(ESLINT_HOME="$ESLINT_HOME" node -e "console.log(require.resolve('@typescript-eslint/parser', { paths: [process.env.ESLINT_HOME] }))")"
            PARSER_PATH="$PARSER_PATH" node -e "const fs=require('fs'); const parser=process.env.PARSER_PATH; const cfg={root:true,ignorePatterns:['node_modules/','.next/','out/','dist/','build/','.vercel/','coverage/','test/','playwright-report/','*.config.js','*.config.cjs'],env:{es2022:true,browser:true,node:true},extends:['eslint:recommended'],overrides:[{files:['**/*.ts','**/*.tsx'],parser,parserOptions:{sourceType:'module',ecmaVersion:2022},plugins:['@typescript-eslint'],extends:['plugin:@typescript-eslint/recommended']}]}; fs.writeFileSync('.eslintrc.ci.json', JSON.stringify(cfg));"
            "$ESLINT_HOME/node_modules/.bin/eslint" \
              -c .eslintrc.ci.json \
              --resolve-plugins-relative-to "$ESLINT_HOME/node_modules" \
              "src/**/*.{js,jsx,ts,tsx}" \
              "app/**/*.{js,jsx,ts,tsx}" \
              "pages/**/*.{js,jsx,ts,tsx}" \
              "components/**/*.{js,jsx,ts,tsx}" \
              --no-error-on-unmatched-pattern --max-warnings=0
          fi
      - name: TypeScript check (tsc --noEmit if tsconfig.json exists)
        working-directory: ./frontend
        run: |
          if [ -f tsconfig.json ]; then
            if [ -f pnpm-lock.yaml ]; then
              pnpm exec tsc --noEmit -p tsconfig.json
            elif [ -f yarn.lock ]; then
              yarn run -s typecheck || yarn dlx --package typescript@5 tsc --noEmit -p tsconfig.json
            else
              npm run -s typecheck || npx --yes --package typescript@5 -- tsc --noEmit -p tsconfig.json
            fi
          else
            echo "No tsconfig.json, skipping type check."
          fi

  backend_quality:
    name: Backend Lint (ruff) & Type Check (mypy)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install quality tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy
      - name: Run ruff on fastapi/ and test/
        run: ruff check fastapi test
      - name: Run mypy (ignore missing imports)
        run: mypy fastapi --ignore-missing-imports --install-types --non-interactive

  perf_locust:
    name: Performance Smoke (Locust 60s)
    runs-on: ubuntu-latest
    timeout-minutes: 12
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      - name: Install app deps and Locust
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install uvicorn locust
      - name: Start FastAPI (background)
        run: |
          nohup bash -c "uvicorn fastapi.main:app --host 0.0.0.0 --port 8000" >/tmp/api.log 2>&1 &
          for i in {1..60}; do
            if curl -fsS http://localhost:8000/docs >/dev/null; then echo 'API up'; break; fi
            sleep 1
          done
      - name: Run Locust headless for 60s
        run: |
          locust -f locustfile.py --headless -u 20 -r 5 -t 60s --host http://localhost:8000 --html locust_report.html --csv smoke
      - name: Upload Locust report artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: locust-report
          path: locust_report.html
          if-no-files-found: ignore

  security_scan:
    name: Security Audit (pip & npm & secrets)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write  # required for SARIF upload
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Run pip-audit
        run: |
          python -m pip install --upgrade pip
          python -m pip install pip-audit
          if [ -f requirements.txt ]; then
            pip-audit -r requirements.txt -f json -o pip-audit.json
          else
            pip-audit -f json -o pip-audit.json
          fi
      - name: Upload pip-audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: pip-audit.json
          if-no-files-found: ignore
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Run npm audit (frontend)
        working-directory: ./frontend
        run: |
          if [ -f package.json ]; then
            npm audit --json > ../npm-audit.json
          else
            echo "No package.json found in frontend."
            exit 1
          fi
      - name: Upload npm-audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: npm-audit.json
          if-no-files-found: ignore

      # ===== gitleaks via CLI (no license required) =====
      - name: Secret scan (gitleaks) — install CLI
        run: |
          curl -sSfL https://raw.githubusercontent.com/gitleaks/gitleaks/master/install.sh \
          | bash -s -- -b /usr/local/bin
          gitleaks version

      - name: Secret scan (gitleaks) — run
        run: |
          gitleaks detect \
            --source . \
            --no-git \
            -v \
            --redact \
            --report-format sarif \
            --report-path gitleaks.sarif \
            --config .github/gitleaks.toml

      - name: Upload SARIF (gitleaks)
        if: ${{ github.event.pull_request.head.repo.fork == false }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

      - name: Upload gitleaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks.sarif
          if-no-files-found: ignore

  gate:
    name: Gate (summary)
    runs-on: ubuntu-latest
    needs:
      - backend_pytest
      - e2e_playwright
      - lighthouse
      - frontend_quality
      - backend_quality
      - perf_locust
      - security_scan
    steps:
      - run: echo "All jobs finished. Check artifacts for detailed reports."
